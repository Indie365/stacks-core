#!/bin/bash
ops () {

  local python=/usr/bin/python
  local initCore=blockstack-core-init
  local storageBucket=https://blockstack.blob.core.windows.net/index
  local image=quay.io/blockstack/blockstack-core
  local tag=develop-configure-mongo

  search-reindex () {
    # Setup logging
    local tmpFile=/var/blockstack-search/logs/search-reindex/$(date +%s).log
    mkdir -p /var/blockstack-search/logs/search-reindex

    $python -m api.search.fetch_data --fetch_namespace 2>> $tmpFile
    $python -m api.search.fetch_data --fetch_profiles 2>> $tmpFile
    echo "[$(date)] Building mongodb index..." >> $tmpFile
    $python -m api.search.basic_index --refresh 2>> $tmpFile
    echo "[$(date)] Finished indexing..." >> $tmpFile
  }

  search-update () {
    # Setup logging
    local tmpFile=/var/blockstack-search/logs/search-update/$(date +%s).log
    local updateProfilesOut=/var/blockstack-search/logs/update-profiles/$(date +s).log
    mkdir -p /var/blockstack-search/logs/search-update

    # Run update_profiles
    echo "Starting indexing at $(date)" >> $tmpFile
    $python -m api.search.fetch_data --update_profiles 2>&1 | tee $updateProfilesOut >> $tmpFile

    # Check that script ran
    grep -q "Indexed" $updateProfilesOut
    UPDATED=$?
    grep -q "Indexed 0 profiles" $updateProfilesOut
    UPDATED_ZERO=$?
    if [ $UPDATED -eq 0 ] && [ $UPDATED_ZERO -ne 0 ]; then
      echo "Refreshing mongodb index at $(date)" >> $tmpFile
      $python -m api.search.basic_index --refresh  >> $tmpFile
    else
      echo "Skipping mondodb index, no new profiles" >> $tmpFile
    fi
    echo "Finished indexing at $(date)" >> $tmpFile
  }

  init-core () {
    local coreData=data/blockstack-core
    echo "Initializing Blockstack Core node. This task runs in the background and may take up to 20 minutes..."
    mkdir -p $coreData/server/
    cp deployment/blockstack-server.ini $coreData/server/blockstack-server.ini
    docker run -d --rm \
      -v $(pwd)/$coreData/server/:/root/.blockstack-server/ \
      -v $(pwd)/$coreData/api/:/root/.blockstack \
      --name $initCore \
      $image:$tag \
      blockstack-core --debug fast_sync http://fast-sync.blockstack.org/snapshot.bsk > /dev/null
  }

  init-api () {
    local apiData=data/blockstack-api
    echo "Initializing Blockstack Core API server with dummy wallet..."
    mkdir -p $apiData
    docker run -it --rm \
      -v $(pwd)/$apiData:/root/.blockstack \
      $image:$tag \
      blockstack setup -y --password dummywalletpassword > /dev/null
    cp deployment/client.ini $apiDataclient.ini
  }

  init-index () {
    local searchData=data/search-api
    local bs=blockchain_data.json
    local pd=profile_data.json
    echo "Pulling current index files from $storageBucket..."
    mkdir -p $searchData
    wget -O $searchData/$bs $storageBucket/$bs > /dev/null 2>&1
    wget -O $searchData/$pd $storageBucket/$pd > /dev/null 2>&1
  }

  install-docker () {
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    apt-get update
    apt-get install -y docker-ce docker-compose
  }

  install-certbot () {
    add-apt-repository ppa:certbot/certbot
    apt-get update
    apt-get install python-certbot-nginx
  }

  commands () {
    cat <<-EOF
ops commands:
  Setup Commands:
    init { deployment domain }
     - Set up the dummy wallet for the core api
     - Fast sync the core node
     - Pull down the current version of the index
     - Configure core server and nginx to point to proper domain

  Commands to be run in Docker Environment:
    search-reindex -> Once every 6 hours
    search-update  -> Once every 15 min
EOF
  }

  case $1 in
    search-reindex)
      search-reindex
      ;;
    search-update)
      search-update
      ;;
    init)
      if [ -z "$2" ]; then
        echo "Need to input domain name that points to this server"
        echo "e.g. core.example.com"
      else
      init-api
      init-index
      init-core
      echo "Configuring nginx to serve core api from $2..."
      sed -i "s/core.example.com/$2/g" deployment/nginx.cfg
      echo "Configuring core api to serve from $2..."
      sed -i "s/core.example.com/$2/g" config.py
      echo "Replacing your /etc/nginx/sites-available folder with deployment/nginx.cfg..."
      rm -rf /etc/nginx/sites-available
      ln deployment/nginx.cfg /etc/nginx/sites-available
      echo "Running certbot..."
      certbot --nginx -d $2
      echo "Reloading nginx..."
      systemctl reload nginx
      ;;
    install-docker)
      install-docker
      ;;
    install-certbot)
      install-certbot
      ;;
    install-nginx)
      apt-get update
      apt-get install nginx
      ;;
    *)
      commands
      ;;
  esac
}

ops $1 $2
